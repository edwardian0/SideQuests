function [opt_delay, min_mean_dist] = opt_temporal_delay(actual_data, target_data)
    % Usage: Find the optimal temporal delay between actual and target arrays - the one giving the smallest mean didstance 
    %   Inputs:
    %       actual_data: actual trajectory array advanced by device
    %       target_data: target trajectory array generated by device
    %   Output:
    %       temp_delay: optimal temporal delay found
    %       min_mui_dist = Return the smallest minimum distance found for current given optimal time delay 
    
    % Set initial variables
    opt_delay = 0;  % The optimal delay found
    min_mean_dist = inf;    % The minimum mean distance found

    % Perform exhaustive search for the optimal temporal delay by loooping through delay range
    for delay = 1:50

        % Shift the actual and target arrays by the current delay for alignment
        acc_shifted = actual_data(delay+1:end, :);
        tgt_shifted = target_data(1:(end - delay), :);

        % Calculate the mean ditance for the shifted arrays 
        mui_dist = mean(sqrt(sum((acc_shifted - tgt_shifted).^2, 2)));

        % For the given delay, check to see if we have found a new minimum distance, and update variables accordingly, when true.
        if mui_dist < min_mean_dist
            min_mean_dist = mui_dist;
            opt_delay = delay;
        end
        
    end
    
end